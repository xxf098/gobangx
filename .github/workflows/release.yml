name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    outputs:
      gobang_version: ${{ env.GOBANG_VERSION }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        build: [linux, linux-arm, macos, win-msvc, win32-msvc]
        include:
        - build: linux
          os: ubuntu-22.04
          rust: stable
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-22.04
          rust: stable
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-latest
          rust: stable
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-2019
          rust: stable
          target: x86_64-pc-windows-msvc
        - build: win32-msvc
          os: windows-2019
          rust: stable
          target: i686-pc-windows-msvc

    steps:
    - name: Get the release version from the tag
      shell: bash
      if: env.GOBANG_VERSION == ''
      run: |
        # Apparently, this is the right way to get a tag name. Really?
        #
        # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
        echo "GOBANG_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        echo "version is: ${{ env.GOBANG_VERSION }}"

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Use Cross
      shell: bash
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

    - name: Show command used for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"

    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/gobang"

    - name: Strip release binary (arm)
      if: matrix.build == 'linux-arm'
      run: |
        docker run --rm -v \
          "$PWD/target:/target:Z" \
          rustembedded/cross:arm-unknown-linux-gnueabihf \
          arm-linux-gnueabihf-strip \
          /target/arm-unknown-linux-gnueabihf/release/gobang

    - name: Build archive
      shell: bash
      run: |
        staging="gobangx-${{ env.GOBANG_VERSION }}-${{ matrix.target }}"
        mkdir -p "$staging"
        
        cp {README.md,LICENSE} "$staging/"

        if [ "${{ matrix.os }}" = "windows-2019" ]; then
          cp "target/${{ matrix.target }}/release/gobang.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          # The man page is only generated on Unix systems. ¯\_(ツ)_/¯
          cp "target/${{ matrix.target }}/release/gobang" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Publish
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.ASSET }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # cargo-publish:
  #   name: Cargo publish
  #   runs-on: ubuntu-latest
  #   needs: release
  #   steps:
  #     - uses: actions/checkout@v1

  #     - name: Install cargo-workspaces
  #       uses: actions-rs/install@v0.1
  #       with:
  #         crate: cargo-workspaces

      # - name: Cargo publish
      #   run: |
      #     git config --global user.email "runner@gha.local"
      #     git config --global user.name "Github Action"
      #     cargo workspaces publish \
      #       --yes --force '*' --exact \
      #       --no-git-commit --allow-dirty --skip-published --token ${{ secrets.CRATES_IO_TOKEN }} \
      #       custom ${{ needs.release.outputs.gobang_version }}
